import { QuestionTemplate } from "@chair-flight/base/types";
import { getOctokit } from "@chair-flight/external/github";
import { getRandomId } from "../random/random";

export const createNewQuestionPr = async (
  questionTemplate: QuestionTemplate
) => {
  const prId = getRandomId();
  const { octokit, owner, repo } = getOctokit();
  const baseBranch = "main";
  const newBranch = `feat-question-${questionTemplate.id}-${prId}`;
  const title = `feat(question): update question ${questionTemplate.id}`;

  const baseBranchRef = await octokit.rest.git.getRef({
    owner,
    repo,
    ref: `heads/${baseBranch}`,
  });

  const newBranchRef = await octokit.rest.git.createRef({
    owner,
    repo,
    ref: `refs/heads/${newBranch}`,
    sha: baseBranchRef.data.object.sha,
  });

  const currentCommit = await octokit.rest.git.getCommit({
    owner,
    repo,
    commit_sha: newBranchRef.data.object.sha,
  });

  const newCommit = await octokit.rest.git.createCommit({
    owner,
    repo,
    author: {
      name: "Chair Flight Bot",
      email: "bot@chair-flight.com",
    },
    message: title,
    tree: currentCommit.data.tree.sha,
    parents: [currentCommit.data.sha],
  });

  await octokit.rest.git.updateRef({
    owner,
    repo,
    ref: `heads/${newBranch}`,
    sha: newCommit.data.sha,
  });

  await octokit.rest.pulls.create({
    owner,
    repo,
    head: newBranch,
    base: baseBranch,
    title: title,
    author: {
      name: "Chair Flight Bot",
      email: "bot@chair-flight.com",
    },
    body: "Automatic PR generated by Chair Flight",
  });
};
